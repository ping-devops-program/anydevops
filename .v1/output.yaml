apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: anydevops
  name: anydevops
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-gp2
mountOptions:
- discard
parameters:
  fsType: ext4
  type: gp2
provisioner: kubernetes.io/aws-ebs
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-io1
mountOptions:
- discard
parameters:
  fsType: ext4
  iopsPerGB: "50"
  type: io1
provisioner: kubernetes.io/aws-ebs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pd-serviceaccount
  namespace: anydevops
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pd-role
  namespace: anydevops
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pd-role-binding
  namespace: anydevops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pd-role
subjects:
- kind: ServiceAccount
  name: pd-serviceaccount
  namespace: anydevops
---
apiVersion: v1
data:
  backup.sh: |-
    #!/bin/sh
    set -e

    # This is the backup directory on ds-0
    SERVER_BACKUP_DIR="/backup"

    echo "Doing a full backup of userRoot backend to "
    "/bin/backup" --task \
      --useSSL --trustAll \
      --hostname ds-0.pingdirectory \
      --port  \
      --bindDN  \
      --bindPasswordFile  \
      --backupDirectory  \
      --backendID userRoot \
      --compress \
      --retainPreviousFullBackupAge 1d

    # FIXME: put kubectl in the image
    echo "Installing kubectl"
    curl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
    chmod +x /usr/local/bin/kubectl

    OLD_BACKUP_DIRS=$(find  -name backup-\* -type d)
    echo "Old backup directories: "

    NEW_BACKUP_DIR=/backup-$(date +%Y%m%d_%H%M%S)
    mkdir -p 

    echo "Copying backup from ds-0: to "
    kubectl cp ds-0: 

    echo "Changing current backup to point to "
    CURRENT_BACKUP_DIR=/current
    ln -snf  

    echo "Removing old backup directories: "
    echo  | xargs rm -rf

    echo "Backup directory contents:"
    ls -latr 

    echo "Current backup contents:"
    ls 
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: backup-script
  namespace: anydevops
---
apiVersion: v1
data:
  init.sh: |-
    #!/bin/sh -x

    #--- Sleep for the configured initial delay seconds ---#
    SLEEP_SECONDS=0
    sleep 

    #--- Copy SSH configuration files ---#
    test -f /known_hosts && cp /known_hosts /.ssh
    test -f /id_rsa && cp /id_rsa /.ssh

    #--- Copy kubectl to the data directory ---#
    which kubectl | xargs -I {} cp {} /data

    #--- Generate a dummy topology JSON file so the hook that generates it in the image is not triggered ---#
    TOPOLOGY_FILE=/data/topology.json
    cat <<EOF > ""
    {
          "serverInstances" : []
    }
    EOF

    exit 0
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds-init
  namespace: anydevops
---
apiVersion: v1
data:
  80-post-start.sh: |-
    #!/bin/sh -x

    . "/pingcommon.lib.sh"

    test -f "/env_vars" && . "/env_vars"
    test -f "/pingdirectory.lib.sh" && . "/pingdirectory.lib.sh"

    echo "Starting post-start hook"

    echo "Running ldapsearch test on this container ()"
    waitUntilLdapUp "localhost" "" ""

    echo "Changing the cluster name to "
    dsconfig --no-prompt \
      --useSSL --trustAll \
      --hostname "" --port "" \
      set-server-instance-prop \
      --instance-name "" \
      --set cluster-name:""

    # --- NOTE ---
    # This assumes that data initialization is only required once for the initial data in the server profile.
    # Subsequent initialization of data will be performed externally after populating one of the servers using data
    # sync or some other mechanism, like import-ldif, followed by dsreplication initialize-all. This assumption may be
    # different for each customer, but the script may be easily adjusted as appropriate for the customer's use case.

    echo "Checking if replication is already set up on "
    REPL_SETUP_MARKER_FILE=/opt/out/instance/config/repl-setup

    if test -f ""; then
      echo "Replication is already set up on "
      exit 0
    fi

    SHORT_HOST_NAME=$(hostname)
    ORDINAL=$(echo )
    echo "Pod ordinal: "

    if test  -eq 0; then
      touch ""
      exit 0
    fi

    DOMAIN_NAME=$(hostname -f | cut -d'.' -f2-)
    SRC_HOST="-0."

    echo "Running dsreplication enable"
    dsreplication enable \
      --retryTimeoutSeconds  \
      --trustAll \
      --host1 "" --port1 "" --useSSL1 \
      --bindDN1 "" --bindPasswordFile1 "" \
      --host2 "" --port2 "" --useSSL2 \
      --bindDN2 "" --bindPasswordFile2 "" \
      --replicationPort2 "" \
      --adminUID "" --adminPasswordFile "" \
      --no-prompt --ignoreWarnings \
      --baseDN "" \
      --noSchemaReplication \
      --enableDebug --globalDebugLevel verbose

    _replEnableResult=$?
    echo "Replication enable for  result="

    if test  -ne 0; then
      echo "Not running dsreplication initialize since enable failed with a non-successful return code"
      exit 
    fi

    echo "Running dsreplication initialize"
    dsreplication initialize \
      --retryTimeoutSeconds  \
      --trustAll \
      --hostSource "" --portSource  --useSSLSource \
      --hostDestination "" --portDestination  --useSSLDestination \
      --baseDN "" \
      --adminUID "" \
      --adminPasswordFile "" \
      --no-prompt \
      --enableDebug \
      --globalDebugLevel verbose

    _replInitResult=$?
    echo "Replication initialize for  result="

    test  -eq 0 && touch ""
    exit 
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds-post-start
  namespace: anydevops
---
apiVersion: v1
data:
  pre-stop.sh: |-
    #!/bin/sh -x

    echo "Starting pre-stop hook"

    SHORT_HOST_NAME=$(hostname)
    ORDINAL=$(echo )
    echo "Pod ordinal: "

    NUM_REPLICAS=$(kubectl get statefulset "" -o jsonpath='{.spec.replicas}')
    echo "Number of replicas: "

    if test  -lt ; then
      echo "Not removing server since it is still in the topology"
      exit 0
    fi

    echo "Gettting instance name from config"
    INSTANCE_NAME=$(dsconfig --no-prompt \
      --useSSL --trustAll \
      --hostname "" --port "" \
      get-global-configuration-prop \
      --property instance-name \
      --script-friendly |
      awk '{ print  }')

    echo "Removing  (instance name: ) from the topology"
    remove-defunct-server --no-prompt \
      --serverInstanceName "" \
      --retryTimeoutSeconds  \
      --ignoreOnline \
      --bindDN "" \
      --bindPasswordFile "" \
      --enableDebug --globalDebugLevel verbose
    echo "Server removal exited with return code: ${?}"

    REPL_SETUP_MARKER_FILE=/opt/out/instance/config/repl-setup
    echo "Removing  marker file"
    rm -f ""
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds-pre-stop
  namespace: anydevops
---
apiVersion: v1
data:
  readiness.sh: |-
    #!/bin/sh -x

    # Verify that server is responsive on its LDAP secure port
    echo "Readiness probe - verifying root DSE access"
    /opt/liveness.sh

    # Verify that replication is set up
    echo "Readiness probe - verifying replication is set up"
    REPL_SETUP_MARKER_FILE=/opt/out/instance/config/repl-setup
    test -f "" && exit 0 || exit 1
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds-ready
  namespace: anydevops
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: anydevops
  name: known-hosts-config
  namespace: anydevops
---
apiVersion: v1
data:
  init.sh: |-
    #!/bin/sh -x

    #--- Sleep for the configured initial delay seconds --- #
    SLEEP_SECONDS=0
    sleep 

    #--- Copy SSH configuration files --- #
    test -f /known_hosts && cp /known_hosts /.ssh
    test -f /id_rsa && cp /id_rsa /.ssh

    #--- Copy kubectl to the data directory ---#
    which kubectl | xargs -I {} cp {} /data

    exit 0
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pa-init
  namespace: anydevops
---
apiVersion: v1
data:
  init.sh: |-
    #!/bin/sh -x

    #--- Sleep for the configured initial delay seconds --- #
    SLEEP_SECONDS=0
    sleep 

    #--- Copy SSH configuration files --- #
    test -f /known_hosts && cp /known_hosts /.ssh
    test -f /id_rsa && cp /id_rsa /.ssh

    #--- Copy kubectl to the data directory ---#
    which kubectl | xargs -I {} cp {} /data

    exit 0
kind: ConfigMap
metadata:
  labels:
    app: anydevops
    role: pingfederate
  name: pf-init
  namespace: anydevops
---
apiVersion: v1
data:
  INITIAL_DELAY_SECONDS: "20"
  ORCHESTRATION_TYPE: kubernetes
  PA_ENGINE_PUBLIC_HOSTNAME: pingaccess.anydevops.com
  PF_ENGINE_PUBLIC_HOSTNAME: pingfederate.anydevops.com
  SERVER_PROFILE_BRANCH: pcpt
  SERVER_PROFILE_PATH: baseline/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-environment-variables
  namespace: anydevops
---
apiVersion: v1
data:
  ADMIN_USER_PASSWORD_FILE: /usr/local/secrets/admin-user-password
  DISABLE_SCHEMA_REPLICATION: "true"
  LDAP_PORT: "389"
  LDAPS_PORT: "636"
  LOCATION: Austin
  MAX_HEAP_SIZE: 4g
  ORCHESTRATION_TYPE: kubernetes
  PA_ENGINE_PUBLIC_HOSTNAME: pingaccess.anydevops.com
  PF_ENGINE_PUBLIC_HOSTNAME: pingfederate.anydevops.com
  REPLICATION_PORT: "8989"
  RETRY_TIMEOUT_SECONDS: "3600"
  ROOT_USER_PASSWORD_FILE: /usr/local/secrets/root-user-password
  SERVER_PROFILE_BRANCH: pcpt
  SERVER_PROFILE_PATH: baseline/pingdirectory
  SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
  USER_BASE_DN: dc=example,dc=com
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-environment-variables
  namespace: anydevops
---
apiVersion: v1
data:
  ORCHESTRATION_TYPE: kubernetes
  PA_ENGINE_PUBLIC_HOSTNAME: pingaccess.anydevops.com
  PF_ENGINE_PUBLIC_HOSTNAME: pingfederate.anydevops.com
  SERVER_PROFILE_BRANCH: pcpt
  SERVER_PROFILE_PATH: baseline/pingfederate
  SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate-environment-variables
  namespace: anydevops
---
apiVersion: v1
data:
  PING_IDENTITY_DEVOPS_KEY: MjczYjgyYmMtNWQyNS00YTQzLWExNjMtMDk5ZjMxMzU2NGVh
  PING_IDENTITY_DEVOPS_USER: c2FtaXJnYW5kaGlAcGluZ2lkZW50aXR5LmNvbQ==
kind: Secret
metadata:
  labels:
    app: anydevops
  name: devops-secret
  namespace: anydevops
type: Opaque
---
apiVersion: v1
data:
  pa.jwk: eyJrZXlzIjpbeyJrdHkiOiJvY3QiLCJraWQiOiJHOHdmaXRja3hEM1c0eXZXIiwia2V5X29wcyI6WyJlbmNyeXB0IiwiZGVjcnlwdCJdLCJhbGciOiJBMTI4Q0JDLUhTMjU2IiwiayI6IkFoTlpmWEpsdlJZY2lKWWVZa2hGeWxJNktleFVQaUpSX0xxQ2dXZU54emMifV19
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-jwk
  namespace: anydevops
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-license
  namespace: anydevops
type: Opaque
---
apiVersion: v1
data:
  INITIAL_ADMIN_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-passwords
  namespace: anydevops
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-license
  namespace: anydevops
type: Opaque
---
apiVersion: v1
data:
  admin-user-password: MkZlZGVyYXRlTTByZQ==
  encryption-password: MkZlZGVyYXRlTTByZQ==
  root-user-password: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-passwords
  namespace: anydevops
type: Opaque
---
apiVersion: v1
data:
  pf.jwk: eyJrZXlzIjpbeyJrdHkiOiJvY3QiLCJraWQiOiJFbUljVTE5V255IiwiayI6ImdVMlpqN1JSd0hTRjhUQWtHUS1JMVRncmNHOHFWWGp0aGtLUHVmY0ZYemsifSx7Imt0eSI6Im9jdCIsImtpZCI6IjJuTmxLdGM5RHAiLCJrIjoiNWY2aDVmaGR2N0oxeWE1WXMtbkpoTmpPWVZEV19VZzBlSEpXb3Q1M0UybyJ9LHsia3R5Ijoib2N0Iiwia2lkIjoib3A2ZVBkVmM3UCIsImsiOiJfTlZkWGtMLVpaOUJDb0RhajdURElVUk4wNi0wek52UThzcG82QU5xNFNnIn0seyJrdHkiOiJvY3QiLCJraWQiOiJObWJWM0V2WWl0IiwiayI6InAxNXlvM290ak5xNkdkVHZnVHFIWVgwUkZjSkNOWFZxNFlDUEtKWm1pQzgifSx7Imt0eSI6Im9jdCIsImtpZCI6IkdDUWNjZjRaOVMiLCJrIjoiSGZOeUxNLUZGUTZCbkZTdHl3Q0JVd2dRYmtHb2pFMVRCVWJWWVNzR2hFZyJ9LHsia3R5Ijoib2N0Iiwia2lkIjoiZlFJZGJmMGZGRiIsImsiOiJFTXdCS2VKTXZZVndGMHhqYjJ4RW5UdHROVFZKcWJSc01ZWXBfMkJGb2lrIn0seyJrdHkiOiJvY3QiLCJraWQiOiJDMzlEODNzUWIzIiwiayI6IndBYnNlVGJtT1pzdFNKVDZuUDNPbnhtNXdxTUdGQ01sSmx2WXhtRlFJREkifSx7Imt0eSI6Im9jdCIsImtpZCI6Ikt1ZTVJNGdnR0IiLCJrIjoiWmpveXcwMWFVdmstV1hSc3VJOUs4dXBjWVRqWEpEMWYyMVJCd1hiTGN0ayJ9LHsia3R5Ijoib2N0Iiwia2lkIjoiVWw1Z2tiQ1hyQyIsImsiOiJjSmlwQy1EWlplQmYzZXdHYmlFeWhSLXRHYmFodk05TEhTVGZnVkJKdm5vIn1dfQ==
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate-jwk
  namespace: anydevops
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate-license
  namespace: anydevops
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: anydevops
  name: ssh-id-key-secret
  namespace: anydevops
type: Opaque
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMxekNDQWIrZ0F3SUJBZ0lKQUlRdC9vZmcvSmZhTUEwR0NTcUdTSWIzRFFFQkN3VUFNQm94R0RBV0JnTlYKQkFNTUQzQnBibWN0WkdWMmIzQnpMbU52YlRBZUZ3MHhPVEV4TWpFeE16TTBORE5hRncweU9URXhNVGd4TXpNMApORE5hTUJveEdEQVdCZ05WQkFNTUQzQnBibWN0WkdWMmIzQnpMbU52YlRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ZUDJlVUk4UDcwUXZJY0Q3ams4WmI5OVNFSzl0VmdCaDlIMU43SWpmUmgKazVQT3dYanRhUURseGpNS0JaTGNDUjNJVDJQQXlRcStDOWFkSWtKK1RXUzB1YVJqeUJkTDFKMHdieXhvR08wYQowRWlSaWU2dSt0NFJQb1pPZExoVWMrM1N0RENhbmpxd01zS25GbTk2ZUlhRHYzeUNJaDVtZjQrc3RvSDJBc0x2CmlSSWNCVE9pazRGTFA3WGh2MTQ4bGVQS1JNOTRmekxyRDRvbFh3cGszZ1NjOFVnNHd6ZGtwbjhER2JlVUgxM08KN20vNkV3bnppYllCTFhxeVZJSWpjQkU0L0JSVmtQTTRRYmtlWkdXUDEyUDUrUkt1SGtoK2RPUXdhWndIMG1VUwo2bFA3ZXVaaDRrOUphNzdDb0wzWm01OG5FVDNKWWVBazA1UDg0V1pqaEFrQ0F3RUFBYU1nTUI0d0hBWURWUjBSCkJCVXdFNElSS2k1d2FXNW5MV1JsZG05d2N5NWpiMjB3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJHVkFVMGYKeWMzM0xLaE5PbnE4Y1p6WGRFNksrc2R2TSt3RUtCYmluWVFjeFB5dEx6eXV4UVJUR1I3OTVOOFczRVNlaVdzeQpZa0ZWeGVXaTk5dCtiQy9zR1VkRmEwTmdVSGtSV2U0Q1VweW51Tk94RnVBSkNIaWRFNVFLOXFmcFMrbUlhWG5zCnBTbEpOSFA1Wk9rajB3SmI4MUJWUVkxV0lvQWRJbW5aT3YxaUoyM2NyUDhWMXQrbURNQ3hiekZmQkhNcU9GekwKcmIyMkxac05MeURWbWFOb1ZXQ1FycXpNSDN5aTdEdEVJSEhkbzZyN2tPZXBnakZFbC9xVlpTQm16bHRoUWk4bgpqSlEwZ0ZWNDRsNzcvdTdiMisrZzBuRVJuTS8rWWgyYXBZMXo1aEQreWFqUWhiQlg4Z0hBZ09lZ0xQcjNISzlsClJLSWg5UTlvWXdoeFBWUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFdEOW5sQ1BEKzlFTHkKSEErNDVQR1cvZlVoQ3ZiVllBWWZSOVRleUkzMFlaT1R6c0Y0N1drQTVjWXpDZ1dTM0FrZHlFOWp3TWtLdmd2VwpuU0pDZmsxa3RMbWtZOGdYUzlTZE1HOHNhQmp0R3RCSWtZbnVydnJlRVQ2R1RuUzRWSFB0MHJRd21wNDZzRExDCnB4WnZlbmlHZzc5OGdpSWVabitQckxhQjlnTEM3NGtTSEFVem9wT0JTeisxNGI5ZVBKWGp5a1RQZUg4eTZ3K0sKSlY4S1pONEVuUEZJT01NM1pLWi9BeG0zbEI5ZHp1NXYraE1KODRtMkFTMTZzbFNDSTNBUk9Qd1VWWkR6T0VHNQpIbVJsajlkaitma1NyaDVJZm5Ua01HbWNCOUpsRXVwVCszcm1ZZUpQU1d1K3dxQzkyWnVmSnhFOXlXSGdKTk9UCi9PRm1ZNFFKQWdNQkFBRUNnZ0VCQUpJaUdCcG5WRDU0K2dyV1pWVlAxaTNDQ1VvWmRoQ01rU0ZocEV6Q2xVWTAKSnM5TTRuOXZjN09OS1JWR3ppOUh6MkZwa2VrRGZ6dTZLZExGU3RJaDd5dkV4TWNZNTB3Z0ZIR0sweHA1cGlxWApsNEV5K2ZyYnNaOVFIbU1KeEZ6aUtwSTh1WTVFdjZoSkNSNGhld3QzakRnb1VOenE2ZWZmQ1U1SUZmLzZ0ai9rCmp3c3ZkM2EwbzBoZnoyRmNKL3Z0YkhqUWVmZFRhMUNyVlVJQ0dqU3hmYmtZa01aeFk4M1hQWTJnQ25UOCtMQ2UKVkp6SVZmczFYTXY1TmNuR0x1WjYyVTFtRjVhZ2VPcTMrUllMUmwzZGVCUllyM01vNGxDK1E1V0l5YlY1MDhGVwpkellwN0xxSjBhRHErVDFGVDUrZXArRGVFRW55QVR4R2F5WWYrTUR3RHhFQ2dZRUE2dCtvcm5XWk9qVGZrRWRoCldLeDlYeHk4T2tURWYxaTFaS1g5d1BZZEFYMzdiWDNlcjd2eXBUYjNWd0lzVHJLWHgxTmJ3eUNTdm40VmJoZVQKOGFuTEJpOUFPWGx0UXk2YnhzRE5aei9tcVUrVlczV1l5V0w0U0NuUXF0WDJjZTZ1WS80MWJXQ0VwUE9hVXVycQpNRWh1ZVl0Y3N1NVRLSVlhVVp2UHlmNDYyVE1DZ1lFQTZWRDM3NEdGUmwxUktPUDI0akpHMkVMVG5aalhBSzBECmsva09FdEJaK1lobkw1MWpTWHFhbklZKzcrM1R4R29zaHByUStFeTgzeFBRdXR4NFR2T3AwNlZTa1BVVnd2VkoKMjBVeHhINUlpVjVpaUxmS25nOCt5U3JSMG9OT2pJRGMwZUpTTTMyNWR4REV6aDdQc09mR21IcUYwQlhvcFJKUQpDMHNJOVVESmhkTUNnWUJVaEgwdm9qT3NSV0I1aTZZVkFhVHZ0K2huMDEwZU1pNjc5QnRXOTNsQ2t6SUptWFNyCnFpZExtbmJ3d1dCdVJVZm11ekZYQ3Y2ak83MjhheEdhc2EzVUlPYXNoK3h3YzNJczJDNVJ6Q1hWb1VTdXI2ZDIKT0gzOWdjYUw0d2lXd1B2U0VhVHFJZ1E1VTB1aU1OUnE0WFdYbVRXWFVibHM2S3pKMXhhenFoOUZEd0tCZ0FMRgo5cHgvTXFGYWZKdDYwalZ3R1kxNmhkOXFzS3VPWXV1QVcxMTM0b25ueUNvMXViZG00SzJabnVmbE1NNDE0TitjCnVYMHFGRmltZUtXdjl6SWhEVlM1czFpTHdUMTNBdkM3U3RNbUdTQ2c0WlQwY2xFY3AwZG0zZVdkci9KVm1jcFkKNFZkQldGSUUvZ0hoTmVESmNIL2hmUE96UHZldlZ3bzdVeGp2TXpZSEFvR0JBTHUvdE9lZ3NGY085ZFFvdmFuTQpwVm5nUExvaUF1TUwrUDh4NEFEcXFLWGx3M0F6a0hzWTF2ODlqVnZtczNaMVNhL2NBTHBUcDhxZ2UybDZVc3lVCk9hZ1FNcG5KL3ZKTWwrN3ppNWo2SWo0SnVzcGVHcm1vN0Fxck1TZStIcXpUc0Vwb1h6SHNGUVVOa0FiVVAweTAKaGwzV2R0d0tuZXllaGF4ckR0MTNNamdLCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: anydevops
    domain: anydevops.com
  name: tls-secret
  namespace: anydevops
type: kubernetes.io/tls
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anydevops
    role: httpbin
  name: httpbin
  namespace: anydevops
spec:
  ports:
  - name: httpbin
    port: 80
  selector:
    app: anydevops
    role: httpbin
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess
  namespace: anydevops
spec:
  ports:
  - name: pa-admin
    port: 9000
  - name: pa-runtime
    port: 443
  - name: pa-agent
    port: 3030
  selector:
    app: anydevops
    role: pingaccess
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anydevops
    role: pingdataconsole
  name: pingdataconsole-service
  namespace: anydevops
spec:
  ports:
  - name: http
    port: 8080
  selector:
    app: anydevops
    role: pingdataconsole
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory
  namespace: anydevops
spec:
  clusterIP: None
  ports:
  - name: ldap
    port: 389
  - name: ldaps
    port: 636
  publishNotReadyAddresses: true
  selector:
    app: anydevops
    role: pingdirectory
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingdirectory-admin.anydevops.com
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: anydevops
    role: pingdirectory
  name: pingdirectory-admin
  namespace: anydevops
spec:
  externalTrafficPolicy: Local
  ports:
  - name: ldaps
    port: 636
  selector:
    app: anydevops
    role: pingdirectory
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate
  namespace: anydevops
spec:
  ports:
  - name: pf-admin
    port: 9999
  - name: pf-runtime
    port: 9031
  selector:
    app: anydevops
    role: pingfederate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anydevops
    role: httpbin
  name: httpbin
  namespace: anydevops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anydevops
      role: httpbin
  template:
    metadata:
      labels:
        app: anydevops
        role: httpbin
      name: httpbin
    spec:
      containers:
      - image: kennethreitz/httpbin
        name: httpbin
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess
  namespace: anydevops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anydevops
      role: pingaccess
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: anydevops
        role: pingaccess
      name: pingaccess
    spec:
      containers:
      - env:
        - name: INITIAL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: INITIAL_ADMIN_PASSWORD
              name: pingaccess-passwords
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        image: pingidentity/pingaccess:edge
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - liveness.sh
          failureThreshold: 10
          periodSeconds: 30
        name: pingaccess
        ports:
        - containerPort: 9000
          name: pa-admin
        - containerPort: 443
          name: pa-runtime
        - containerPort: 3030
          name: pa-agent
        readinessProbe:
          exec:
            command:
            - liveness.sh
          failureThreshold: 10
          periodSeconds: 30
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "1"
            memory: 1.5Gi
        volumeMounts:
        - mountPath: /root/.ssh
          name: ssh-dir
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-license
          subPath: pingaccess.lic
        - mountPath: /opt/in/instance/conf/pa.jwk
          name: pingaccess-jwk
          subPath: pa.jwk
      initContainers:
      - command:
        - /init.sh
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        name: pa-init
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /init.sh
          name: pa-init
          subPath: init.sh
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pa-init
        name: pa-init
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingaccess-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-license
      - name: pingaccess-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-passwords
      - name: pingaccess-jwk
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-jwk
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anydevops
    role: pingdataconsole
  name: pingdataconsole
  namespace: anydevops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anydevops
      role: pingdataconsole
  template:
    metadata:
      annotations:
        lastUpdateTime: NA
      labels:
        app: anydevops
        role: pingdataconsole
      name: pingdataconsole
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: devops-secret
            optional: true
        image: pingidentity/pingdataconsole:edge
        name: pingdataconsole
        ports:
        - containerPort: 8080
          name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate
  namespace: anydevops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: anydevops
      role: pingfederate
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: anydevops
        role: pingfederate
      name: pingfederate
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        image: pingidentity/pingfederate:edge
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - liveness.sh
          failureThreshold: 10
          periodSeconds: 30
        name: pingfederate
        ports:
        - containerPort: 9999
          name: pf-admin
        - containerPort: 9031
          name: pf-runtime
        readinessProbe:
          exec:
            command:
            - liveness.sh
          failureThreshold: 10
          periodSeconds: 30
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: /root/.ssh
          name: ssh-dir
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/in/instance/server/default/data/pf.jwk
          name: pingfederate-jwk
          subPath: pf.jwk
      initContainers:
      - command:
        - /init.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        name: pf-init
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /init.sh
          name: pf-init
          subPath: init.sh
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pf-init
        name: pf-init
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
      - name: pingfederate-jwk
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-jwk
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds
  namespace: anydevops
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: anydevops
      role: pingdirectory
  serviceName: pingdirectory
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: anydevops
        role: pingdirectory
    spec:
      containers:
      - env:
        - name: K8S_STATEFUL_SET_NAME
          value: ds
        - name: MAX_HEAP_SIZE
          value: 4g
        - name: UNBOUNDID_JAVA_ARGS
          value: -client -Xmx4g -Xms4g
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: root-user-password
              name: pingdirectory-passwords
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        image: pingidentity/pingdirectory:edge
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/pre-stop.sh
        livenessProbe:
          exec:
            command:
            - liveness.sh
          failureThreshold: 10
          initialDelaySeconds: 600
          periodSeconds: 30
        name: ds
        ports:
        - containerPort: 389
          name: ldap
        - containerPort: 636
          name: ldaps
        readinessProbe:
          exec:
            command:
            - /opt/staging/readiness.sh
          failureThreshold: 120
          periodSeconds: 30
        resources:
          limits:
            cpu: "2"
            memory: 5Gi
          requests:
            cpu: "2"
            memory: 5Gi
        volumeMounts:
        - mountPath: /root/.ssh
          name: ssh-dir
        - mountPath: /opt/staging/topology.json
          name: data-dir
          subPath: topology.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /usr/local/secrets
          name: pingdirectory-passwords
          readOnly: true
        - mountPath: /opt/in/instance/PingDirectory.lic
          name: pingdirectory-license
          subPath: PingDirectory.lic
        - mountPath: /opt/staging/readiness.sh
          name: ds-ready
          subPath: readiness.sh
        - mountPath: /opt/staging/pre-stop.sh
          name: ds-pre-stop
          subPath: pre-stop.sh
        - mountPath: /opt/staging/hooks/80-post-start.sh
          name: ds-post-start
          subPath: 80-post-start.sh
      initContainers:
      - command:
        - /init.sh
        env:
        - name: K8S_STATEFUL_SET_NAME
          value: ds
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        name: ds-init
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /init.sh
          name: ds-init
          subPath: init.sh
      serviceAccount: pd-serviceaccount
      terminationGracePeriodSeconds: 300
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: ds-init
        name: ds-init
      - configMap:
          defaultMode: 365
          name: ds-pre-stop
        name: ds-pre-stop
      - configMap:
          defaultMode: 365
          name: ds-ready
        name: ds-ready
      - configMap:
          defaultMode: 365
          name: ds-post-start
        name: ds-post-start
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingdirectory-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-license
      - name: pingdirectory-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-passwords
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: anydevops
        role: pingdirectory
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: pingdirectory-gp2
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: ds-periodic-backup
  namespace: anydevops
spec:
  jobTemplate:
    metadata:
      labels:
        app: anydevops
        role: pingdirectory
    spec:
      template:
        metadata:
          labels:
            app: anydevops
            role: pingdirectory
        spec:
          containers:
          - command:
            - /opt/in/backup.sh
            env:
            - name: BACKUP_DIR
              value: /pd_backups
            image: pingidentity/pingdirectory:edge
            name: ds-backup
            volumeMounts:
            - mountPath: /usr/local/secrets
              name: passwords
              readOnly: true
            - mountPath: /pd_backups
              name: backup-volume
            - mountPath: /opt/in/backup.sh
              name: backup-script
              subPath: backup.sh
          restartPolicy: OnFailure
          serviceAccount: pd-serviceaccount
          volumes:
          - name: passwords
            secret:
              defaultMode: 256
              secretName: pingdirectory-passwords
          - configMap:
              defaultMode: 365
              name: backup-script
            name: backup-script
          - name: backup-volume
            persistentVolumeClaim:
              claimName: pd-backup-pvc
  schedule: 0 */6 * * *
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess
  namespace: anydevops
spec:
  maxReplicas: 8
  minReplicas: 1
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: pingaccess
  targetCPUUtilizationPercentage: 70
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-private
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-admin-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingaccess-admin.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingaccess
          servicePort: 9000
        path: /
  tls:
  - hosts:
    - pingaccess-admin.anydevops.com
    secretName: tls-secret
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-public
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-agent-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingaccess-agent.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingaccess
          servicePort: 3030
        path: /
  tls:
  - hosts:
    - pingaccess-agent.anydevops.com
    secretName: tls-secret
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-public
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  labels:
    app: anydevops
    role: pingaccess
  name: pingaccess-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingaccess.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingaccess
          servicePort: 443
        path: /
  tls:
  - hosts:
    - pingaccess.anydevops.com
    secretName: tls-secret
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-private
  labels:
    app: anydevops
    role: pingdataconsole
  name: pingdataconsole-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingdataconsole.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingdataconsole-service
          servicePort: 8080
        path: /console
  tls:
  - hosts:
    - pingdataconsole.anydevops.com
    secretName: tls-secret
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-private
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate-admin-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingfederate-admin.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingfederate
          servicePort: 9999
        path: /
  tls:
  - hosts:
    - pingfederate-admin.anydevops.com
    secretName: tls-secret
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-public
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  labels:
    app: anydevops
    role: pingfederate
  name: pingfederate-ingress
  namespace: anydevops
spec:
  rules:
  - host: pingfederate.anydevops.com
    http:
      paths:
      - backend:
          serviceName: pingfederate
          servicePort: 9031
        path: /
  tls:
  - hosts:
    - pingfederate.anydevops.com
    secretName: tls-secret
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: anydevops
    role: pingdirectory
  name: pd-backup-pvc
  namespace: anydevops
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: pingdirectory-gp2
